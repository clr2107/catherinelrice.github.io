<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-14T15:08:45-05:00</updated><id>http://localhost:4000/</id><title type="html">Catherine Rice</title><subtitle>Web developer based in NYC.</subtitle><entry><title type="html">Web Dev Glossary</title><link href="http://localhost:4000/jekyll/update/2017/12/11/glossary.html" rel="alternate" type="text/html" title="Web Dev Glossary" /><published>2017-12-11T14:33:57-05:00</published><updated>2017-12-11T14:33:57-05:00</updated><id>http://localhost:4000/jekyll/update/2017/12/11/glossary</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/12/11/glossary.html">&lt;p&gt;I’m putting together a glossary or dictionary of common web development terms that I find myself always looking up, because even if I have heard a particular term before, I still don’t have a good grasp of the concept. One way that I study, in general, is just by compiling a list of terms and ideas that keep coming up, that I know are important, and recording definitions and sometimes examples from different sources (Wikipedia, a coding website in this case like StackOverflow) and I find it helps me remember things more. So far I have:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt;:
package manager for the JavaScript programming language - default package manager for the JavaScript runtime environment node.js
&lt;br /&gt;
&lt;strong&gt;Node.js&lt;/strong&gt;:
an open-source, cross-platform JavaScript run-time environment for executing JavaScript server-side
&lt;br /&gt;
&lt;strong&gt;Run-time system&lt;/strong&gt;:
implements portions of an execution model
&lt;br /&gt;
&lt;strong&gt;Scripting/script language&lt;/strong&gt;:
programming language that supports scripts: programs writen for a special run-time environment that automate the execution of tasks that could alternatively be executed one-byone by a human operator
&lt;br /&gt;
&lt;strong&gt;web API endpoint&lt;/strong&gt;:
a server-side web API is a programmatic interface consisting of one or more publicly exposed endpoints to a defined request - response message system expressed in JSON or XML, which is exposed via the web, most commonly by means of an HTTP-based web server
&lt;br /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m putting together a glossary or dictionary of common web development terms that I find myself always looking up, because even if I have heard a particular term before, I still don’t have a good grasp of the concept. One way that I study, in general, is just by compiling a list of terms and ideas that keep coming up, that I know are important, and recording definitions and sometimes examples from different sources (Wikipedia, a coding website in this case like StackOverflow) and I find it helps me remember things more. So far I have:</summary></entry><entry><title type="html">Object-oriented JavaScript</title><link href="http://localhost:4000/jekyll/update/2017/12/07/post.html" rel="alternate" type="text/html" title="Object-oriented JavaScript" /><published>2017-12-07T14:33:57-05:00</published><updated>2017-12-07T14:33:57-05:00</updated><id>http://localhost:4000/jekyll/update/2017/12/07/post</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/12/07/post.html">&lt;p&gt;Today I spent some time reviewing object-oriented JavaScript, or OOJS for short, through a course called Frontend Masters. Although JavaScript does not have formal classes the way Ruby or other object-oriented languages do, the constructor function can act like a class in that it can act like a blueprint for creating new instances of objects. The prototype property is used to add methods to existing constructors.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today I spent some time reviewing object-oriented JavaScript, or OOJS for short, through a course called Frontend Masters. Although JavaScript does not have formal classes the way Ruby or other object-oriented languages do, the constructor function can act like a class in that it can act like a blueprint for creating new instances of objects. The prototype property is used to add methods to existing constructors.</summary></entry><entry><title type="html">Making a Jekyll Site</title><link href="http://localhost:4000/jekyll/update/2017/12/05/test-post.html" rel="alternate" type="text/html" title="Making a Jekyll Site" /><published>2017-12-05T14:33:57-05:00</published><updated>2017-12-05T14:33:57-05:00</updated><id>http://localhost:4000/jekyll/update/2017/12/05/test-post</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/12/05/test-post.html">&lt;p&gt;This is my first post using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a static site generator. Initially I didn’t really know what the purpose of Jekyll was, but now I see that it uses a collection of layouts to create a general template for a static website or blog. The main theme has a very nice looking design, very minimalist (actually it’s called “Minima”). I do feel a little bit guilty using a site generator, especially after learning Rails and knowing how to incorporate a fair bit of Bootstrap or Materialize CDNs. But, I decided I’m just going to use it to get a personal website up and running and have a place to display projects.&lt;/p&gt;

&lt;p&gt;Although, as this dude Mike discusses in one of his tutorial videos on Jekyll &lt;a href=&quot;https://www.youtube.com/watch?v=ZtEbGztktvc&quot;&gt;here&lt;/a&gt;, Jekyll can be useful and fun for both someone with little to no programming experience or someone who wants to customize and change the layout files, etc. For example, I just learned about &lt;a href=&quot;http://www.yaml.org/&quot;&gt;YAML&lt;/a&gt;. (It is NOT a markup language) but is actually a “human-readable data serialization language commonly used for configuration files”.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is my first post using Jekyll, a static site generator. Initially I didn’t really know what the purpose of Jekyll was, but now I see that it uses a collection of layouts to create a general template for a static website or blog. The main theme has a very nice looking design, very minimalist (actually it’s called “Minima”). I do feel a little bit guilty using a site generator, especially after learning Rails and knowing how to incorporate a fair bit of Bootstrap or Materialize CDNs. But, I decided I’m just going to use it to get a personal website up and running and have a place to display projects.</summary></entry><entry><title type="html">Welcome to my website!</title><link href="http://localhost:4000/jekyll/update/2017/12/01/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to my website!" /><published>2017-12-01T14:33:57-05:00</published><updated>2017-12-01T14:33:57-05:00</updated><id>http://localhost:4000/jekyll/update/2017/12/01/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/12/01/welcome-to-jekyll.html">&lt;p&gt;Welcome&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome</summary></entry></feed>